plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.cyclonedx.bom' version '1.8.2'
}

group = 'be.krdhaen.sbom'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

abstract class PublishSBOM extends DefaultTask {
    @Input
    String filePath
    @Input
    String uploadUrl
    @Input
    String apiKey
    @Input
    String projectUuid

    @TaskAction
    void publish() {
        println("Publishing SBOM [filePath: $filePath, uploadUrl: $uploadUrl, apiKey: $apiKey, projectUuid: $projectUuid]")
        def base64FileContent = encodeBase64(filePath)
        try {
            uploadFile(uploadUrl, apiKey, base64FileContent, projectUuid)
        } catch (Exception e) {
            throw new GradleException("Failed to upload file: $e", e)
        }
    }

    private static String encodeBase64(String filePath) {
        try {
            def fileContents = new File(filePath).getText('UTF-8')
            return fileContents.bytes.encodeBase64().toString()
        } catch (Exception e) {
            throw new GradleException("Failed to read or encode file contents: $e", e)
        }
    }

    private static void uploadFile(String uploadUrl, String apiKey, String base64FileContent, String projectUuid) {
//        println("SBOM base64 file: $base64FileContent")

        def jsonBody = "{\"project\": \"$projectUuid\", \"bom\": \"$base64FileContent\"}"

        try {
            def put = (HttpURLConnection) URI.create(uploadUrl).toURL().openConnection();
            def message = jsonBody
            put.setRequestMethod("PUT")
            put.setDoOutput(true)
            put.setRequestProperty("Content-Type", "application/json")
            put.setRequestProperty("X-API-Key", apiKey)
            put.getOutputStream().write(message.getBytes("UTF-8"));
            def responseCode = put.getResponseCode();
            if (responseCode == 200) {
                println(put.getInputStream().getText());
            } else {
                throw new IOException("Failed to upload file. Response code was $responseCode")
            }
        } catch (Exception e) {
            throw new GradleException("Failed to upload file: $e")
        }
    }
}

tasks.register("publishSBOM", PublishSBOM) {
    group = "publishing"
    description = "Upload SBOM to CycloneDx"
    dependsOn build

    filePath = "build/reports/application.cdx.json"
    uploadUrl = "http://localhost:8081/api/v1/bom"
    apiKey = "odt_Noe8Y14ZoJCw5QsSXUa1SUUH5LYgTYs3"
    projectUuid = "7b0cb7b6-515a-41a7-aa9f-17a6f4db7489"
}

build.configure {
    finalizedBy publishSBOM
}